import tkinter as tk
from tkinter import filedialog, scrolledtext
from lexer import lexer
from parser import parser, symbol_table, intermediate_code
from vm import SimpleVM

class KUSPCompiler:
    def __init__(self, root):
        self.root = root
        self.root.title("KUSP – Mini C Compiler")
        self.root.geometry("950x650")
        self.root.configure(bg="#282a36")

        self.create_widgets()

    def create_widgets(self):
        # --- Menu ---
        menubar = tk.Menu(self.root, bg="#44475a", fg="#f8f8f2")
        filemenu = tk.Menu(menubar, tearoff=0, bg="#44475a", fg="#f8f8f2")
        filemenu.add_command(label="Open", command=self.open_file)
        filemenu.add_command(label="Save", command=self.save_file)
        menubar.add_cascade(label="File", menu=filemenu)
        self.root.config(menu=menubar)

        # --- Editor ---
        self.code_input = scrolledtext.ScrolledText(
            self.root, wrap=tk.WORD, height=20,
            bg="#1e1e2e", fg="#f8f8f2", insertbackground='white',
            font=("Consolas", 12)
        )
        self.code_input.pack(padx=10, pady=8, fill=tk.BOTH, expand=True)

        # --- Buttons ---
        btn_frame = tk.Frame(self.root, bg="#282a36")
        btn_frame.pack()

        btn_style = {"bg": "#6272a4", "fg": "white", "font": ("Arial", 10), "padx": 10, "pady": 4}

        tk.Button(btn_frame, text="Lexical Analysis", command=self.run_lexer, **btn_style).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="Compile", command=self.run_parser, **btn_style).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="Clear Output", command=self.clear_output, **btn_style).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="Run Code", command=self.run_vm, **btn_style).pack(side=tk.LEFT, padx=5)

        # --- Output Window ---
        self.output_box = scrolledtext.ScrolledText(
            self.root, wrap=tk.WORD, height=10,
            bg="#1e1e2e", fg="#50fa7b", font=("Consolas", 11)
        )
        self.output_box.pack(padx=10, pady=8, fill=tk.BOTH)

    def open_file(self):
        path = filedialog.askopenfilename(filetypes=[("C files", "*.c")])
        if path:
            with open(path, "r") as file:
                self.code_input.delete(1.0, tk.END)
                self.code_input.insert(tk.END, file.read())

    def save_file(self):
        path = filedialog.asksaveasfilename(defaultextension=".c", filetypes=[("C files", "*.c")])
        if path:
            with open(path, "w") as file:
                file.write(self.code_input.get(1.0, tk.END))

    def run_lexer(self):
        code = self.code_input.get(1.0, tk.END)
        self.output_box.insert(tk.END, "\n--- Tokens ---\n")
        lexer.lineno = 1  # Reset
        lexer.input(code)
        while True:
            tok = lexer.token()
            if not tok:
                break
            self.output_box.insert(tk.END, f"{tok.type}: {tok.value} (line {tok.lineno})\n")

    def run_parser(self):
        code = self.code_input.get(1.0, tk.END)
        self.output_box.insert(tk.END, "\n--- Compilation Output ---\n")
        lexer.lineno = 1
        intermediate_code.clear()
        symbol_table.clear()
        result = parser.parse(code)

        # Store the intermediate code in the class instance
        self.intermediate_code = intermediate_code.copy()

        self.output_box.insert(tk.END, "\nSymbol Table:\n")
        for var, typ in symbol_table.items():
           self.output_box.insert(tk.END, f"{var} : {typ}\n")

        self.output_box.insert(tk.END, "\nIntermediate Code:\n")
        for line in self.intermediate_code:
            self.output_box.insert(tk.END, f"{line}\n")

        self.output_box.insert(tk.END, "\n✅ Compilation complete.\n")


    def clear_output(self):
        self.output_box.delete(1.0, tk.END)
        lexer.lineno = 1  # Reset line counter

    def run_vm(self):
        self.output_box.insert(tk.END, "\n--- Runtime Output ---\n")

        try:
            # Make sure `self.intermediate_code` exists and is generated by your parser
            vm = SimpleVM()
            vm.execute(self.intermediate_code, output_callback=lambda msg: self.output_box.insert(tk.END, msg + "\n"))
        except Exception as e:
            self.output_box.insert(tk.END, f"Runtime Error: {str(e)}\n")

if __name__ == "__main__":
    root = tk.Tk()
    app = KUSPCompiler(root)
    root.mainloop()
    